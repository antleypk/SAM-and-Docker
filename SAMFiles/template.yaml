AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: antleypk solution 
Resources:
  ProjectAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
      DefinitionBody:
        swagger: '2.0'
        info:
          version: '1.0'
          title: 'antleypkCode00'
          host: "rn1cckfv31.execute-api.us-east-1.amazonaws.com"
        basePath: "/Prod"
        schemes:
        - "https"
        x-amazon-apigateway-binary-media-types:
          - '*/*'
        paths:
          /countofobjects:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:153477074805:function:SAMCountOfObstacles/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
          /allobjects:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:153477074805:function:SAMAllObstacles/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
          /obstaclesbylocation:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:153477074805:function:SAMAllObstaclesByLocation/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
          /unittest:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:153477074805:function:SAMAllUnitTest/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
  ConfigLambdaPermission3:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - ProjectAPI
    - UnitTest
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UnitTest
      Principal: apigateway.amazonaws.com
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UnitTest
      Principal: apigateway.amazonaws.com
  UnitTest:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SAMAllUnitTest
      Handler: UnitTest.lambda_handler
      Runtime: python3.6
      CodeUri: src 
      MemorySize: 128 
      Timeout: 30
      Policies:
        - AWSLambdaFullAccess 
        - AmazonS3FullAccess 
        - AmazonAPIGatewayInvokeFullAccess 
      Events:
        MyEndpoint:
          Type: Api 
          Properties:
            Path: /allobjects
            Method: get
            RestApiId:
              Ref: ProjectAPI
  ConfigLambdaPermission2:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - ProjectAPI
    - ObstaclesByLocation
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ObstaclesByLocation
      Principal: apigateway.amazonaws.com
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ObstaclesByLocation
      Principal: apigateway.amazonaws.com
  ObstaclesByLocation:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SAMAllObstaclesByLocation
      Handler: ObstaclesByLocation.lambda_handler
      Runtime: python3.6
      CodeUri: src 
      MemorySize: 128 
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonS3FullAccess 
        - AmazonAPIGatewayInvokeFullAccess 
      Events:
        MyEndpoint:
          Type: Api 
          Properties:
            Path: /allobjects
            Method: get
            RestApiId:
              Ref: ProjectAPI
  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - ProjectAPI
    - SelectAll
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SelectAll
      Principal: apigateway.amazonaws.com
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SelectAll
      Principal: apigateway.amazonaws.com
  SelectAll:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SAMAllObstacles
      Handler: SelectAll.lambda_handler
      Runtime: python3.6
      CodeUri: src 
      MemorySize: 128 
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonS3FullAccess 
        - AmazonAPIGatewayInvokeFullAccess 
      Events:
        MyEndpoint:
          Type: Api 
          Properties:
            Path: /allobjects
            Method: get
            RestApiId:
              Ref: ProjectAPI
  ConfigLambdaPermission1:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - ProjectAPI
    - CountOfObstacles
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CountOfObstacles
      Principal: apigateway.amazonaws.com
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CountOfObstacles
      Principal: apigateway.amazonaws.com
  CountOfObstacles:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SAMCountOfObstacles
      Handler: CountOfObstacles.lambda_handler
      Runtime: python3.6
      CodeUri: src 
      MemorySize: 128 
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonS3FullAccess 
        - AmazonAPIGatewayInvokeFullAccess 
      Events:
        MyEndpoint:
          Type: Api 
          Properties:
            Path: /allobjects
            Method: get
            RestApiId:
              Ref: ProjectAPI
    
